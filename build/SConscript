import os
import nucleotide


Import('settings')

name_full = 'test'
directory_src = os.path.join( '..','src','fm' )
directory_pdb = os.path.join( '..','out' )
directory_obj = os.path.join( '..','out','obj'  )
directory_bin = os.path.join( '..','out','bin'  )

directory_submodule = os.path.join( '..','submodule'  )

settings.set_custom( 'RTL',           'dynamic' )
settings.set_custom( 'architecture',  'i386'    )
settings.set_custom( 'configuration', 'debug'   )

configuration = settings.get_custom( 'configuration' )

# Accumulate Atoms
settings.accumulate( 'include', { '1' : os.path.join( directory_submodule,      'color', 'src' ) } )
settings.accumulate( 'include', { '2' : os.path.join( directory_submodule, 'reflection', 'src' ) } )

settings.accumulate( 'architecture', { 'name' : settings.get_custom( 'architecture' ) } )
settings.accumulate( 'exception' )
settings.accumulate( 'source:c++', { 'dialect' : 'c++11' } )
settings.accumulate( 'RTTI', { 'enable': 'false' } )
settings.accumulate( 'compiler:configuration', { 'name'          : configuration  } )
settings.accumulate( 'compiler:optimisation',  { 'configuration' : configuration  } )
settings.accumulate( 'compiler:version',  { 'id' : '12.0'  } )

settings.accumulate( 'PDB', { 'configuration': configuration , 'synchronous' : 'false', 'file-name': os.path.join( directory_pdb, name_full + '.pdb' ) } )
settings.accumulate( 'RTL', { 'configuration' : configuration, 'type': settings.get_custom( 'RTL' ) } )

#settings.accumulate( 'macro',  { 'name' : 'SAMPLE_MACRO'  } )

# Accumulate source
envObject = nucleotide.Environment( settings ).native()

def process_source( source_path ):
    path = str.split( source_path, '/' )
    name, ext = str.split( path[ len(path) - 1  ], '.' )
    path[ len(path) - 1  ] = name
    args =  {
       'target' : os.path.join( directory_obj, *path ) + envObject[ 'OBJSUFFIX' ]
      ,'source' : os.path.join( directory_src, *path ) + '.' + ext
    }
    return args

source = []
source += [
    envObject.StaticObject( **process_source( 'main/main.cpp' ) )
   ,envObject.StaticObject( **process_source( 'logic/storage/disc/linux/device.cpp' ) )
   ,envObject.StaticObject( **process_source( 'logic/storage/disc/linux/manager.cpp' ) )
   ,envObject.StaticObject( **process_source( 'logic/storage/disc/linux/file.cpp' ) )

   ,envObject.StaticObject( **process_source( 'logic/storage/disc/linux/device/property/folder.cpp' ) )
   ,envObject.StaticObject( **process_source( 'logic/storage/disc/linux/device/property/name.cpp' ) )
   ,envObject.StaticObject( **process_source( 'logic/storage/disc/linux/device/property/size.cpp' ) )

   ,envObject.StaticObject( **process_source( 'logic/storage/disc/linux/file/property/name.cpp' ) )
   ,envObject.StaticObject( **process_source( 'logic/storage/disc/linux/file/property/size.cpp' ) )
  ]

# Make native environment
envProgram = nucleotide.Environment( settings ).native()

# Create program
program = envProgram.Program( target =  os.path.join( directory_bin, 'main' ) + envProgram['PROGSUFFIX'], source = source )

# ... and return!
Return( 'program' )
